#!/bin/zsh

: '
	Helpful functions to detect things like: arch, OS, etc
'

##
##  TODO: Detect OS
##    Unsure if this is useful.  Maybe.  thought so originally - but probably not.
##
function TODO.detect.os {
  local osType=$(echo ${OSTYPE:l} | tr -d '[:digit:]._-')
  local unameResult=$(echo ${uname:l})
  printf "${osType}\n"
  printf "${unameResult}\n"
}

# if grep -qs "ubuntu" /etc/os-release; then
# 	os="ubuntu"
# 	os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
# 	group_name="nogroup"
# elif [[ -e /etc/debian_version ]]; then
# 	os="debian"
# 	os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
# 	group_name="nogroup"
# elif [[ -e /etc/almalinux-release || -e /etc/rocky-release || -e /etc/centos-release ]]; then
# 	os="centos"
# 	os_version=$(grep -shoE '[0-9]+' /etc/almalinux-release /etc/rocky-release /etc/centos-release | head -1)
# 	group_name="nobody"
# elif [[ -e /etc/fedora-release ]]; then
# 	os="fedora"
# 	os_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)
# 	group_name="nobody"
# else
# 	echo "This installer seems to be running on an unsupported distribution.
# Supported distros are Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS and Fedora."
# 	exit
# fi

# if [[ "$os" == "ubuntu" && "$os_version" -lt 1804 ]]; then
# 	echo "Ubuntu 18.04 or higher is required to use this installer.
# This version of Ubuntu is too old and unsupported."
# 	exit
# fi

# if [[ "$os" == "debian" && "$os_version" -lt 9 ]]; then
# 	echo "Debian 9 or higher is required to use this installer.
# This version of Debian is too old and unsupported."
# 	exit
# fi

# if [[ "$os" == "centos" && "$os_version" -lt 7 ]]; then
# 	echo "CentOS 7 or higher is required to use this installer.
# This version of CentOS is too old and unsupported."
# 	exit
# fi

##
##  Detect if zsh is installed, where, and current config pointer value
##
function detect.zshInstall {
  local zshBin=$(command -v zsh) || zshBin="UNDEF"
  if ! [[ ${zshBin} == "UNDEF" ]]; then
    echo $?
  fi

}

##
##  Checks to see if a script was called directly
##  Arguments:
##    $1 = message to output if script is called directly
##
function detect.directCall() {
  if [[ ! $SHLVL -gt 2 ]]; then
    ##printf "\nThis script should not be called directly.\n"
    sourced=0
  fi
}
